import asyncio
import logging
import os

import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
DB_HOST = os.getenv('DB_HOST')
DB_PORT = os.getenv('DB_PORT')
DB_NAME = os.getenv('DB_NAME')
DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')

ERROR_MESSAGES = {
    400: "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.",
    401: "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á.",
    403: "–û—à–∏–±–∫–∞: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
    404: "–û—à–∏–±–∫–∞: –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.",
    429: "–û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    500: "–û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–¥–Ω–µ–µ."
}

WAREHOUSES_ENDPOINT = 'https://supplies-api.wildberries.ru/api/v1/warehouses'
COFFICIENTS_ENDPOINT = 'https://supplies-api.wildberries.ru/api/v1/acceptance/coefficients'
PING_ENDPOINT = 'https://supplies-api.wildberries.ru/ping'

WAREHOUSES_PER_PAGE = 6

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
dp.callback_query.middleware(CallbackAnswerMiddleware())


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_db_pool():
    return await asyncpg.create_pool(
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        host=DB_HOST,
        port=DB_PORT,
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async def setup_database():
    pool = await create_db_pool()
    async with pool.acquire() as conn:
        with open('database.sql', 'r', encoding='UTF-8') as sql_file:
            sql = sql_file.read()
        await conn.execute(sql)
    await pool.close()


async def update_warehouses(api_key: str):
    headers = {'Authorization': api_key}
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.get(WAREHOUSES_ENDPOINT) as response:
            if response.status == 200:
                data = await response.json()
                await update_warehouses_in_db(data)
            return {
                'status': response.status,
                'message': ERROR_MESSAGES.get(response.status, 'OK')
            }


async def update_warehouses_in_db(data):
    pool = await create_db_pool()
    async with pool.acquire() as conn:
        insert_query = """
            INSERT INTO warehouses (warehouse_id, name, last_updated)
            VALUES ($1, $2, NOW()) ON CONFLICT (warehouse_id) DO UPDATE 
            SET name = EXCLUDED.name, last_updated = EXCLUDED.last_updated
        """
        for warehouse in data:
            warehouse_id = warehouse.get('ID')
            name = warehouse.get('name')
            if "–°–¶" not in name:
                await conn.execute(insert_query, warehouse_id, name)


async def get_coefficients(api_key: str, warehouses: list[int]):
    headers = {'Authorization': api_key}
    params = {'warehouseIDs': ','.join([str(x) for x in warehouses])}
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.get(COFFICIENTS_ENDPOINT,
                               headers=headers, params=params) as response:
            if response.status == 200:
                data = await response.json()
            else:
                data = {"error": response.status}
            await session.close()
            return data


# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
async def validate_api_key(api_key: str) -> bool:
    headers = {'Authorization': api_key}
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.get(PING_ENDPOINT) as response:
            return response.status == 200


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    entering_api_key = State()
    choosing_warehouses = State()
    editing_warehouses = State()
    editing_notification_threshold = State()
    editing_polling_frequency = State()
    editing_api_key = State()


# –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_router = Router()


# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ó–∞–ø—Ä–æ—Å API –∫–ª—é—á–∞
@registration_router.message(Command('start'))
async def start_registration(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    pool = await create_db_pool()

    async with pool.acquire() as conn:
        user = await conn.fetchrow(
            'SELECT user_id FROM users WHERE telegram_id = $1', telegram_id)
        if user:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        else:
            await message.answer(
                'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wildberries.\n'
                'üîë –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∫–ª—é—á –∏–º–µ–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–æ—Å—Ç–∞–≤–∫–∏!')
            await state.set_state(RegistrationStates.entering_api_key)

    await pool.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∫–ª—é—á–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
@registration_router.message(RegistrationStates.entering_api_key)
async def process_api_key(message: Message, state: FSMContext):
    api_key = message.text
    telegram_id = message.from_user.id

    await message.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞, –æ–∂–∏–¥–∞–π—Ç–µ')

    if await validate_api_key(api_key):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        pool = await create_db_pool()
        async with pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO users (telegram_id, api_key) '
                'VALUES ($1, $2) ON CONFLICT (telegram_id) DO UPDATE SET api_key = $2',
                telegram_id, api_key
            )

        await pool.close()

        # –ü–µ—Ä–µ—Ö–æ–¥ —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞
        await message.answer(
            '‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.')
        await update_warehouses(api_key)
        await show_warehouse_selection(message)
        await state.set_state(RegistrationStates.choosing_warehouses)
    else:
        await message.answer(
            '‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_available_warehouses():
    pool = await create_db_pool()
    async with pool.acquire() as conn:
        warehouses = await conn.fetch(
            'SELECT warehouse_id, name FROM warehouses')
    await pool.close()
    return warehouses


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏
async def generate_warehouse_keyboard(selected_warehouses=[], page: int = 0):
    warehouses = await get_available_warehouses()
    builder = InlineKeyboardBuilder()

    selected_ids = selected_warehouses

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ —Å–∫–ª–∞–¥—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_index = page * WAREHOUSES_PER_PAGE
    end_index = start_index + WAREHOUSES_PER_PAGE
    paginated_warehouses = warehouses[start_index:end_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    buttons = []
    for index, warehouse in enumerate(paginated_warehouses):
        is_selected = warehouse['warehouse_id'] in selected_ids
        button_text = f'‚úÖ {warehouse["name"]}' if is_selected else warehouse[
            'name']
        buttons.append(InlineKeyboardButton(
            text=button_text,
            callback_data=f'select_{warehouse["warehouse_id"]}_page_{page}')
        )

        if index % 2 == 1:
            builder.row(*buttons)
            buttons.clear()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ <<, –°–æ—Ö—Ä–∞–Ω–∏—Ç—å, >>
    navigation_row = []
    if page > 0:
        navigation_row.append(
            {'text': '<<', 'callback_data': f'page_{page - 1}'})
    navigation_row.append({'text': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'callback_data': 'done'})
    if end_index < len(warehouses):
        navigation_row.append(
            {'text': '>>', 'callback_data': f'page_{page + 1}'})

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder.row(
        *[InlineKeyboardButton(**nav_button) for nav_button in navigation_row])

    return builder.as_markup()


# –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤
async def show_warehouse_selection(message: Message, selected_warehouses=[]):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–∫–ª–∞–¥–æ–≤
    keyboard = await generate_warehouse_keyboard(selected_warehouses)
    await message.answer('üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:',
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
@registration_router.callback_query(
    lambda callback: callback.data.startswith('select_'))
async def warehouse_selected(callback: CallbackQuery, state: FSMContext):
    warehouse_id = int(callback.data.split('_')[1])
    page = int(callback.data.split('_')[3])
    telegram_id = callback.from_user.id

    pool = await create_db_pool()
    async with pool.acquire() as conn:
        user_warehouses = await conn.fetch(
            'SELECT warehouse_id FROM user_warehouses '
            'WHERE user_id = (SELECT user_id FROM users WHERE telegram_id = $1)',
            telegram_id)

    selected_ids = [row['warehouse_id'] for row in user_warehouses]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω
    if warehouse_id in selected_ids:
        selected_ids.remove(warehouse_id)
        await callback.answer(
            f'‚ùå –°–∫–ª–∞–¥ {warehouse_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.')
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with pool.acquire() as conn:
            await conn.execute(
                'DELETE FROM user_warehouses '
                'WHERE user_id = (SELECT user_id FROM users WHERE telegram_id = $1) AND warehouse_id = $2',
                telegram_id, warehouse_id)
    else:
        selected_ids.append(warehouse_id)
        await callback.answer(f'‚úÖ –°–∫–ª–∞–¥ {warehouse_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.')
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO user_warehouses (warehouse_id, user_id) '
                'VALUES ($1, (SELECT user_id FROM users WHERE telegram_id = $2))',
                warehouse_id, telegram_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏
    keyboard = await generate_warehouse_keyboard(selected_ids, page=page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

    await pool.close()


@registration_router.callback_query(lambda c: c.data.startswith('page_'))
async def change_page_callback(callback_query: CallbackQuery):
    page = int(callback_query.data.split('_')[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pool = await create_db_pool()
    async with pool.acquire() as conn:
        user_warehouses = await conn.fetch(
            'SELECT warehouse_id FROM user_warehouses '
            'WHERE user_id = (SELECT user_id FROM users WHERE telegram_id = $1)',
            callback_query.from_user.id)

    selected_ids = [row['warehouse_id'] for row in user_warehouses]
    keyboard = await generate_warehouse_keyboard(selected_ids,
                                                 page=page)
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@registration_router.callback_query(lambda callback: callback.data == 'done')
async def finish_warehouse_selection(callback: CallbackQuery,
                                     state: FSMContext):
    await callback.message.answer(
        'üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–∫–ª–∞–¥–∞—Ö.')
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_main_menu(callback.message)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
@registration_router.message(Command('menu'))
async def show_main_menu(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', callback_data='settings')
    await message.answer('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboard.as_markup())


# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@registration_router.callback_query(
    lambda callback: callback.data == 'settings')
async def settings_menu(callback: CallbackQuery):
    telegram_id = callback.from_user.id

    pool = await create_db_pool()
    async with pool.acquire() as conn:
        user_settings = await conn.fetchrow(
            'SELECT polling_frequency, notification_threshold FROM users WHERE telegram_id = $1',
            telegram_id)

        warehouses = await conn.fetch(
            'SELECT name FROM warehouses w JOIN user_warehouses uw ON w.warehouse_id = uw.warehouse_id '
            'WHERE uw.user_id = (SELECT user_id FROM users WHERE telegram_id = $1)',
            telegram_id)

    if user_settings:
        warehouse_names = ', '.join(
            [w['name'] for w in warehouses]) if warehouses else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
        await callback.message.answer(
            f'–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'
            f'\nüì¶ –°–∫–ª–∞–¥—ã: {warehouse_names}'
            f'\nüîÑ –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞: {user_settings['polling_frequency']} –º–∏–Ω—É—Ç'
            f'\nüìä –ü–æ—Ä–æ–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞: {user_settings['notification_threshold']}'
        )
        keyboard = InlineKeyboardBuilder()
        warehouses = InlineKeyboardButton(text='üì¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–ª–∞–¥—ã',
                                          callback_data='edit_warehouses')
        polling = InlineKeyboardButton(text='üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞',
                                       callback_data='edit_polling_frequency')
        threshold = InlineKeyboardButton(text='üìä –ü–æ—Ä–æ–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞',
                                         callback_data='edit_threshold')
        api_key = InlineKeyboardButton(text='üîë –ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á',
                                       callback_data='edit_api_key')
        keyboard.row(warehouses, polling)
        keyboard.row(threshold, api_key)
        await callback.message.answer('üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                      reply_markup=keyboard.as_markup())
    else:
        await callback.message.answer('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
    await pool.close()


@registration_router.callback_query(
    lambda callback: callback.data == 'edit_warehouses')
async def edit_warehouses(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    pool = await create_db_pool()

    async with pool.acquire() as conn:
        user_warehouses = await conn.fetch(
            'SELECT warehouse_id FROM user_warehouses '
            'WHERE user_id = (SELECT user_id FROM users WHERE telegram_id = $1)',
            telegram_id)

    selected_ids = [row['warehouse_id'] for row in user_warehouses]
    await show_warehouse_selection(callback.message, selected_ids)

    await state.set_state(RegistrationStates.editing_warehouses)
    await pool.close()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ–ø—Ä–æ—Å–∞
@registration_router.callback_query(
    lambda callback: callback.data == 'edit_polling_frequency')
async def edit_polling_frequency(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='5 –º–∏–Ω—É—Ç', callback_data='set_polling_5')
    keyboard.button(text='15 –º–∏–Ω—É—Ç', callback_data='set_polling_15')
    keyboard.button(text='30 –º–∏–Ω—É—Ç', callback_data='set_polling_30')
    keyboard.button(text='60 –º–∏–Ω—É—Ç', callback_data='set_polling_60')
    await callback.message.answer('üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –æ–ø—Ä–æ—Å–∞:',
                                  reply_markup=keyboard.as_markup())


@registration_router.callback_query(
    lambda callback: callback.data.startswith('set_polling_'))
async def process_new_polling_frequency(callback: CallbackQuery):
    new_frequency = int(callback.data.split('_')[-1])
    telegram_id = callback.from_user.id

    pool = await create_db_pool()
    async with pool.acquire() as conn:
        await conn.execute(
            'UPDATE users SET polling_frequency = $1 WHERE telegram_id = $2',
            new_frequency, telegram_id)
    await pool.close()

    await callback.message.answer('üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
    await show_main_menu(callback.message)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
@registration_router.callback_query(
    lambda callback: callback.data == 'edit_threshold')
async def edit_notification_threshold(callback: CallbackQuery,
                                      state: FSMContext):
    await callback.message.answer('üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞:')
    await state.set_state(RegistrationStates.editing_notification_threshold)


@registration_router.message(RegistrationStates.editing_notification_threshold)
async def process_new_notification_threshold(message: Message,
                                             state: FSMContext):
    try:
        new_threshold = float(message.text)
        telegram_id = message.from_user.id

        pool = await create_db_pool()
        async with pool.acquire() as conn:
            await conn.execute(
                'UPDATE users SET notification_threshold = $1 WHERE telegram_id = $2',
                new_threshold, telegram_id)
        await pool.close()

        await message.answer('üìä –ü–æ—Ä–æ–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!')
        await show_main_menu(message)
    except (ValueError, asyncpg.exceptions.CheckViolationError):
        await message.answer('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 20.')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞
@registration_router.callback_query(
    lambda callback: callback.data == 'edit_api_key')
async def edit_api_key(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        'üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wildberries:')
    await state.set_state(RegistrationStates.editing_api_key)


@registration_router.message(RegistrationStates.editing_api_key)
async def process_new_api_key(message: Message, state: FSMContext):
    new_api_key = message.text
    telegram_id = message.from_user.id

    if await validate_api_key(new_api_key):
        pool = await create_db_pool()
        async with pool.acquire() as conn:
            await conn.execute(
                'UPDATE users SET api_key = $1 WHERE telegram_id = $2',
                new_api_key, telegram_id)
        await pool.close()

        await message.answer('API –∫–ª—é—á –æ–±–Ω–æ–≤–ª—ë–Ω!')
        await show_main_menu(message)
    else:
        await message.answer(
            '‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á.')


async def start_polling():
    pool = await create_db_pool()
    loop_num = 0
    while True:
        async with pool.acquire() as conn:
            users = await conn.fetch(
                'SELECT user_id, api_key, polling_frequency, notification_threshold FROM users')

        for user in users:
            if loop_num % user['polling_frequency'] == 0:
                await check_coefficients_for_user(
                    user['user_id'],
                    user['api_key'],
                    user['notification_threshold']
                )

        await asyncio.sleep(60)
        loop_num += 1


async def check_coefficients_for_user(user_id, api_key, threshold):
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pool = await create_db_pool()
    async with pool.acquire() as conn:
        warehouses = await conn.fetch(
            'SELECT warehouse_id FROM user_warehouses WHERE user_id = $1',
            user_id)

    if not warehouses:
        return

    warehouse_ids = [warehouse['warehouse_id'] for warehouse in warehouses]
    coefficients = await get_coefficients(api_key, warehouse_ids)

    good_coefficients = []
    for coefficient in coefficients:
        if -1 < int(coefficient['coefficient']) <= threshold:
            good_coefficients.append(coefficient)
    await notify_user(user_id, good_coefficients)


async def notify_user(user_id, coefficients):
    pool = await create_db_pool()
    async with pool.acquire() as conn:
        telegram_id = await conn.fetchval(
            'SELECT telegram_id FROM users WHERE user_id = $1', user_id)
    await pool.close()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    message = (f'‚ùóÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(coefficients)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:\n' +
               '\n'.join(
                   [f'{c['warehouseName']} | {c['coefficient']} | '
                    f'{c['boxTypeName']} | {c['date']}' for c in coefficients])
               )
    await bot.send_message(telegram_id, message)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(registration_router)

if __name__ == '__main__':
    print('Starting bot')
    asyncio.run(setup_database())
    loop = asyncio.new_event_loop()
    loop.create_task(start_polling())  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    loop.run_until_complete(dp.start_polling(bot))
